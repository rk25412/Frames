@{
    ViewData["Title"] = "Workers List";
}

<div class="d-flex justify-content-between mt-4">
    <h2>Workers</h2>
    <button type="button" id="openCreateWorkerModal" class="btn btn-primary">
        Add New Worker
    </button>
</div>

<ol class="breadcrumb mb-4">
    <li class="breadcrumb-item active">Workers</li>
</ol>

<div class="card">
    <div class="card-body">
        <table id="datatable" style="width: 100%">
            <thead>
                <tr>
                    <th>Customer ID</th>
                    <th>Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
        </table>
    </div>
</div>

@*Add New Worker Modal*@
<div class="modal fade" id="addNewWorkerModal" tabindex="-1" aria-labelledby="addNewWorkerModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addNewWorkerModal">Add New Worker</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" class="row needs-validation">
                    <div class="col-12">
                        <input type="hidden" id="newWorkerId" />
                        <div class="has-validation">
                            <label for="newWorkerNameInput" class="form-label">Worker Name</label>
                            <input type="text" class="form-control" name="newWorkerNameInput" id="newWorkerNameInput"
                                   required />
                            <div class="invalid-feedback" id="newWorkerNameInvalidFeedback"></div>
                        </div>

                        <div class="d-flex justify-content-between mt-3">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary save-button">Save changes</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


@section Scripts
{
<script>
    let _$modal = $('#addNewWorkerModal'),
        _$form = _$modal.find('form'),
        _$table = $('#datatable'),
        _$createButton = $('#openCreateWorkerModal'),
        _$nameInput = $('#newWorkerNameInput'),
        _$nameInputInvalidFeedback = $('#newWorkerNameInvalidFeedback');

    let _$workerTable = _$table.DataTable({
        "processing": true, // for show progress bar
        "serverSide": true, // for process server side
        "filter": true, // this is for disable filter (search box)
        "orderMulti": false, // for disable multiple column at once
        "ajax": {
            "url": "/Workers/GetAllWorkers",
            "type": "post",
            "datatype": "json"
        },
        //"columnDefs": [{
        //    "targets": [0],
        //    "searchable": false,
        //    "sortable": false
        //}],
        "columns": [
            { "data": "id", "name": "ID", "autowidth": "true", "searchable": false, "sortable": false },
            { "data": "name", "name": "Name", "autowidth": "true" },
            {
                "render": function (data, type, full, meta) {
                    return "some"
                }, "searchable": false, "sortable": false
            }
        ]
    });

    _$createButton.on('click', (e) => {
        e.preventDefault();
        $('#newWorkerId').val(0)
        _$nameInput.val('');
        _$nameInput.removeClass('is-valid');
        _$nameInput.removeClass('is-invalid');
        _$nameInputInvalidFeedback.html('');
        _$modal.modal('show');
    })

    _$nameInput.on('blur', e => checkNameExist(e))

    _$form.find('.save-button').on('click', async (e) => {
        e.preventDefault();
        const notOk = await checkNameExist();
        if (notOk) return;

        const workerDto = {
            Id: $('#newWorkerId').val(),
            Name: _$nameInput.val()
        }

        let response;
        try {
            response = await postData('workers/CreateOrUpdateEmployee', workerDto)
        } catch(err) {
            alert(err)
            return;
        }

        if(response.id > 0) {
            alert('created')
            _$workerTable.ajax.reload()
            _$modal.modal('hide')
        }
    })

    async function postData(url = "", data = {}) {
        const response = await fetch(url, {
            method: 'POST',
            mode: 'same-origin',
            headers: {
                'Content-Type':'application/json'
            },
            body: JSON.stringify(data)
        })

        return response.json();
    }

    const checkNameExist = async () => {
        let name = _$nameInput.val();

        if (!name) {
            _$nameInput.addClass('is-invalid');
            _$nameInputInvalidFeedback.html(`Name cannot be empty`);
            return true;
        }

        let isExistFetch = await fetch(`/Workers/IsEmployeeNameTaken?name=${name}`);
        let isExist = await isExistFetch.json();

        if (isExist) {
            _$nameInput.removeClass('is-valid');
            _$nameInput.addClass('is-invalid');
            _$nameInputInvalidFeedback.html(`${name} is taken`);
            return true;
        }
        else {
            _$nameInput.removeClass('is-invalid');
            _$nameInput.addClass('is-valid');
            _$nameInputInvalidFeedback.html('');
            return false;
        }
    }
</script>
}